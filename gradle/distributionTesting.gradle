/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.testing.DistributionTest
import org.gradle.testing.LeakingProcessKillPattern
import org.gradle.util.GradleVersion

ext.distributionTestTasks = tasks.withType(DistributionTest)

distributionTestTasks.all { DistributionTest task ->
    dependsOn ':toolingApi:toolingApiShadedJar'
    dependsOn ':cleanUpCaches'
    finalizedBy ':cleanUpDaemons'
    shouldRunAfter 'test'

    jvmArgs '-Xmx512m', '-XX:+HeapDumpOnOutOfMemoryError'
    if (!javaVersion.java8Compatible) {
        jvmArgs '-XX:MaxPermSize=768m'

    }

    reports.junitXml.destination = new File(project.testResultsDir, name)

    // use -PtestVersions=all or -PtestVersions=1.2,1.3â€¦
    if (project.hasProperty('testVersions')) {
        systemProperties['org.gradle.integtest.versions'] = project.testVersions
    }
    if (!systemProperties['org.gradle.integtest.versions']) {
        systemProperties['org.gradle.integtest.versions'] = 'latest'
    }

    systemProperties['org.gradle.integtest.native.toolChains'] = project.hasProperty("testAllPlatforms") && project.testAllPlatforms ? 'all' : 'default'

    systemProperties['org.gradle.integtest.multiversion'] = project.hasProperty("testAllVersions") && project.testAllVersions ? 'all' : 'default'

    def mirrorUrls = collectMirrorUrls()
    def mirrors = ['mavencentral', 'jcenter', 'lightbendmaven', 'ligthbendivy', 'google']
    mirrors.each { mirror ->
        systemProperties["org.gradle.integtest.mirrors.$mirror"] = mirrorUrls[mirror] ?: ''
    }

    dependsOn project.task("configure${task.name.capitalize()}") {
        doLast {
            configure(task) {
                reports.html.destination = file("${project.reporting.baseDir}/$name")
                gradleHomeDir = intTestImage.destinationDir
                gradleUserHomeDir = rootProject.file('intTestHomeDir')
                toolingApiShadedJarDir = rootProject.project(':toolingApi').toolingApiShadedJar.destinationDir

                if (requiresLibsRepo) {
                    libsRepo = rootProject.file('build/repo')
                }
                if (requiresDists) {
                    distsDir = rootProject.distsDir
                    systemProperties['integTest.distZipVersion'] = version
                }
                if (requiresBinZip) {
                    binZip = project(':distributions').binZip.archivePath
                }
                daemonRegistry = file("$rootProject.buildDir/daemon")
            }
        }
    }

    ext.daemonListener = null

    doFirst {
        def daemonPids = rootProject.cleanUpDaemons.daemonPids
        def suspiciousDaemons = rootProject.cleanUpDaemons.suspiciousDaemons
        daemonListener = [
            beforeTest : { test -> },
            afterTest  : { test, result -> },
            beforeSuite: { suite ->
                forEachJavaProcess { pid, process ->
                    // processes that exist before the test suite execution should
                    // not trigger a warning
                    daemonPids << pid
                }
            },
            afterSuite : { suite, result ->
                forEachJavaProcess { pid, process ->
                    if (!daemonPids.contains(pid)) {
                        daemonPids << pid
                        suspiciousDaemons."$suite" << pid
                    }
                }
            }] as TestListener
        gradle.addListener(daemonListener)
    }

    doLast {
        gradle.removeListener(daemonListener)
    }
}

def collectMirrorUrls() {
    // expected env var format: repo1_id:repo1_url,repo2_id:repo2_url,...
    System.getenv('REPO_MIRROR_URLS')?.split(',')?.collectEntries { nameToUrl ->
        def index = nameToUrl.indexOf(':')
        [(nameToUrl.substring(0, index)) : nameToUrl.substring(index + 1)]
    } ?: [:]
}

/**
 * Clean up cache files for older versions that aren't multi-process safe.
 */
def removeDodgyCacheFiles(File dir) {
    if (dir.directory) {
        for (File cacheDir : dir.listFiles()) {
            if (!cacheDir.name.matches("\\d+\\.\\d+(\\.\\d+)?(-\\w+)*(-\\d{14}[+-]\\d{4})?")) {
                continue
            }
            for (String name : ["fileHashes", "outputFileStates", "fileSnapshots"]) {
                def stateDir = new File(cacheDir, name)
                if (stateDir.directory) {
                    println "Removing old cache directory : ${stateDir}"
                    delete(stateDir)
                }
            }
        }
    }
}


/**
 * Clean up daemon log files produced in integration tests.
 */
def removeDaemonLogFiles(File dir) {
    if (dir.directory) {
        def daemonLogFiles = fileTree(dir) {
            include '**/*.log'
        }
        delete daemonLogFiles
    }
}

/**
 * Removes state for versions that we're unlikely to ever need again, such as old snapshot versions.
 */
def removeOldVersionsFromDir(File dir, shouldDelete, dirPrefix = "", dirSuffix = "") {
    if (dir.directory) {

        for (File cacheDir : dir.listFiles()) {
            if (!cacheDir.name.startsWith(dirPrefix) || !cacheDir.name.endsWith(dirSuffix)) {
                continue
            }
            def dirVersion = cacheDir.name.substring(dirPrefix.length(), cacheDir.name.length() - dirSuffix.length())
            if (!dirVersion.matches("\\d+\\.\\d+(\\.\\d+)?(-\\w+)*(-\\d{14}[+-]\\d{4})?")) {
                continue
            }

            def cacheVersion
            try {
                cacheVersion = GradleVersion.version(dirVersion)
            } catch (IllegalArgumentException e) {
                // Ignore
                continue
            }

            if (shouldDelete(cacheVersion)) {
                println "Removing old cache directory : ${cacheDir}"
                delete(cacheDir)
            }
        }
    }
}

def removeCachedScripts(File cachesDir) {
    if (cachesDir.directory) {
        for (File cacheDir : cachesDir.listFiles()) {
            if(cacheDir.directory) {
                ["scripts", "scripts-remapped", "gradle-kotlin-dsl", "gradle-kotlin-dsl-accessors"].each {
                    File scriptsCacheDir = new File(cacheDir, it)
                    if(scriptsCacheDir.directory) {
                        println "Removing scripts cache directory : ${scriptsCacheDir}"
                        delete(scriptsCacheDir)
                    }
                }
            }
        }
    }
}

project(":") {
    if (tasks.findByName('cleanUpCaches')) {
        return
    }

    task cleanUpCaches {
        dependsOn ':createBuildReceipt'
        doLast {
            def executingVersion = GradleVersion.version(gradle.gradleVersion)

            // Expire .gradle cache where major version is older than executing version
            def expireTaskCache = { candidateVersion ->
                return candidateVersion.baseVersion < executingVersion.baseVersion
            }

            // Expire intTestImage cache snapshots that are older than the tested version
            // Also expire version-specific cache snapshots when they can't be re-used (for 'snapshot-1' developer builds)
            def expireIntegTestCache = { candidateVersion ->
                return (candidateVersion.snapshot && candidateVersion < GradleVersion.version(version)) || candidateVersion.version.endsWith('-snapshot-1')
            }

            // Remove state for old versions of Gradle that we're unlikely to ever require again
            removeOldVersionsFromDir(file("buildSrc/.gradle"), expireTaskCache)
            removeOldVersionsFromDir(file(".gradle"), expireTaskCache)
            removeOldVersionsFromDir(file("intTestHomeDir/worker-1/caches"), expireIntegTestCache)

            // Remove scripts caches
            removeCachedScripts(file("intTestHomeDir/worker-1/caches"))
            // Remove script caches from TestKit integTest temp dir
            // location defined in TempTestKitDirProvider, copied here
            def testKitTmpDir = new File(new File(System.getProperty("java.io.tmpdir")), String.format(".gradle-test-kit-%s", System.getProperty("user.name")))
            removeCachedScripts(new File(testKitTmpDir, "caches"))

            removeOldVersionsFromDir(file("intTestHomeDir/worker-1/daemon"), expireIntegTestCache)

            // Remove old distributions used by wrapper that we're unlikely to ever require again
            removeOldVersionsFromDir(file("intTestHomeDir/worker-1/wrapper/dists"), expireIntegTestCache, "gradle-", "-bin")
            delete(file("intTestHomeDir/worker-1/wrapper/dists/dist"))

            // Remove caches that weren't multi-process safe and may be corrupt
            removeDodgyCacheFiles(file("intTestHomeDir/worker-1/caches"))

            // Remove old daemon log files
            removeDaemonLogFiles(file("intTestHomeDir/worker-1/daemon"))
        }
    }
}

def forEachJavaProcess(Closure action) {
    String queryString = LeakingProcessKillPattern.generate(rootProject.projectDir.absolutePath)
    def output = new ByteArrayOutputStream()
    def error = new ByteArrayOutputStream()
    def pidPattern
    def result
    if (org.gradle.internal.os.OperatingSystem.current().windows) {
        result = exec {
            commandLine('wmic', 'process', 'get', 'processid,commandline')
            standardOutput = output
            errorOutput = error
            ignoreExitValue = true
        }
        pidPattern = /([0-9]+)\s*$/
    } else {
        result = exec {
            commandLine('ps', 'x')
            standardOutput = output
            errorOutput = output
            ignoreExitValue = true
        }
        pidPattern = /([0-9]+)/
    }
    if (result.exitValue != 0) {
        def errorLog = file("${rootProject.buildDir}/errorLogs/process-list-${System.currentTimeMillis()}.log")
        project.mkdir(errorLog.parent)
        errorLog.text = "[Output]\n${output.toString()}\n[Error Output]\n${error.toString()}"
        logger.quiet "Error obtaining process list, output log created at $errorLog"
        result.assertNormalExitValue()
    }
    output.toString().readLines().each { String line ->
        def processMatcher = line =~ queryString
        if (processMatcher.find()) {
            def pidMatcher = line =~ pidPattern
            if (pidMatcher.find()) {
                def pid = pidMatcher.group(1)
                def process = processMatcher.group(1)
                if (!isMe(process)) {
                    action.call(pid, process)
                }
            }
        }
    }
}

def isMe(process) {
    process.contains(project.gradle.gradleHomeDir.path)
}

def pkill(pid) {
    def killOutput = new ByteArrayOutputStream()
    def result = exec {
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            commandLine = ["taskkill.exe", "/F", "/T", "/PID", pid]
        } else {
            commandLine = ["kill", pid]
        }
        standardOutput = killOutput
        errorOutput = killOutput
        ignoreExitValue = true
    }
    if (result.exitValue != 0) {
        String out = killOutput.toString()
        if (!out.contains('No such process')) {
            logger.warn("""Failed to kill daemon process $pid. Maybe already killed?
Output: ${killOutput}
""")
        }
    }
}

project(":") {
    if (tasks.findByName('cleanUpDaemons')) {
        return
    }
    task killExistingProcessesStartedByGradle {
        doLast {
            def didKill = false
            forEachJavaProcess { pid, process ->
                logger.warn("A process wasn't shutdown properly in a previous Gradle run. Killing process with PID $pid (Command line: $process)")
                pkill(pid)
                didKill = true
            }
            if (didKill) {
                //it might take a moment until file handles are released
                Thread.sleep(5000)
            }
        }
    }

    task cleanUpDaemons {
        ext.suspiciousDaemons = [:].withDefault { [].asSynchronized() }.asSynchronized()
        ext.daemonPids = ([] as Set).asSynchronized()
        doLast {
            Set alreadyKilled = []
            forEachJavaProcess { pid, process ->
                suspiciousDaemons.each { suite, pids ->
                    if (pids.contains(pid) && !alreadyKilled.contains(pid)) {
                        logger.warn("A process was created in $suite but wasn't shutdown properly. Killing PID $pid (Command line: $process)")
                        pkill(pid)
                    }
                }
            }
        }
    }
    if (isCiServer) {
        clean.dependsOn killExistingProcessesStartedByGradle
        subprojects {
            tasks.all {
                mustRunAfter(killExistingProcessesStartedByGradle)
            }
        }
    }
}
