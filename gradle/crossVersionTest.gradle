import org.gradle.testing.CrossVersionTest

apply plugin: 'java'

sourceSets {
    crossVersionTest {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

configurations {
    crossVersionTestCompile.extendsFrom testCompile
    crossVersionTestImplementation.extendsFrom testImplementation
    crossVersionTestRuntime.extendsFrom testRuntime
    crossVersionTestRuntimeOnly.extendsFrom testRuntimeOnly
    partialDistribution.extendsFrom crossVersionTestRuntimeClasspath
}

dependencies {
    crossVersionTestCompile project(":internalIntegTesting")

    //so that implicit help tasks are available:
    crossVersionTestRuntime project(':diagnostics')

    //So that the wrapper and init task are added when crossVersionTests are run via commandline
    crossVersionTestRuntime project(':buildInit')
    //above can be removed when we implement the auto-apply plugins

    crossVersionTestRuntime project(":toolingApiBuilders")
}

testFixtures.from(":toolingApi")

ext.crossVersionTestTasks = tasks.withType(CrossVersionTest)

crossVersionTestTasks.all { CrossVersionTest task ->
    group = "verification"
    testClassesDirs = sourceSets.crossVersionTest.output.classesDirs
    classpath = sourceSets.crossVersionTest.runtimeClasspath
    requiresLibsRepo = true
}

task crossVersionTest(type: CrossVersionTest) {
    def defaultExecuter = project.hasProperty("defaultIntegTestExecuter") ? project.defaultIntegTestExecuter : "embedded"
    description "Runs crossVersionTest with '${defaultExecuter}' executer"
    systemProperties['org.gradle.integtest.executer'] = defaultExecuter
    if (project.hasProperty('org.gradle.integtest.debug')) {
        systemProperties['org.gradle.integtest.debug'] = 'true'
        testLogging.showStandardStreams = true
    }
    if (project.hasProperty('org.gradle.integtest.verbose')) {
        testLogging.showStandardStreams = true
    }
    if(project.hasProperty('org.gradle.integtest.launcher.debug')) {
        systemProperties['org.gradle.integtest.launcher.debug'] = 'true'
    }
}
check.dependsOn(crossVersionTest)

['embedded', 'forking'].each { mode ->
    def taskName = "${mode}CrossVersionTest"
    tasks.create(taskName, CrossVersionTest).configure {
        description "Runs crossVersionTests with '${mode}' executer"
        systemProperties['org.gradle.integtest.executer'] = mode
    }
}

task allVersionsCrossVersionTests {
    description "Runs the cross-version tests against all Gradle versions with 'forking' executer"
}

task quickFeedbackCrossVersionTests {
    description "Runs the cross-version tests against a subset of selected Gradle versions with 'forking' executer for quick feedback"
}

releasedVersions.testedVersions.each { targetVersion ->
    tasks.create("gradle${targetVersion}CrossVersionTest", CrossVersionTest).configure {
        allVersionsCrossVersionTests.dependsOn it
        description "Runs the cross-version tests against Gradle ${targetVersion}"
        systemProperties['org.gradle.integtest.versions'] = targetVersion
        systemProperties['org.gradle.integtest.executer'] = 'forking'
    }
}

releasedVersions.getTestedVersions(true).each { targetVersion ->
    tasks.getByName("gradle${targetVersion}CrossVersionTest").configure {
        quickFeedbackCrossVersionTests.dependsOn it
    }
}

plugins.withType(org.gradle.plugins.ide.idea.IdeaPlugin) { // lazy as plugin not applied yet
    idea {
        module {
            testSourceDirs += sourceSets.crossVersionTest.groovy.srcDirs
            testSourceDirs += sourceSets.crossVersionTest.resources.srcDirs
            scopes.TEST.plus.add(configurations.crossVersionTestCompileClasspath)
            scopes.TEST.plus.add(configurations.crossVersionTestRuntimeClasspath)
        }
    }
}

plugins.withType(org.gradle.plugins.ide.eclipse.EclipsePlugin) { // lazy as plugin not applied yet
    eclipse {
        classpath {
            plusConfigurations.add(configurations.crossVersionTestCompileClasspath)
            plusConfigurations.add(configurations.crossVersionTestRuntimeClasspath)
        }
    }
}
