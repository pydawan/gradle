import org.gradle.build.ClasspathManifest
import org.gradle.build.DefaultJavaInstallation
import org.gradle.testing.DistributionTest

import org.gradle.internal.jvm.Jvm
import org.gradle.jvm.toolchain.internal.JavaInstallationProbe

import java.util.jar.Attributes

apply plugin: 'groovy'

archivesBaseName = "gradle-${name.replaceAll("\\p{Upper}") { "-${it.toLowerCase()}" }}"

sourceCompatibility = 1.7

def javaInstallationProbe = gradle.services.get(JavaInstallationProbe)

ext {
    compileTasks = tasks.matching { it instanceof JavaCompile || it instanceof GroovyCompile }
    testTasks = tasks.withType(Test)
    javaInstallationForTest = new DefaultJavaInstallation()
    generatedResourcesDir = file("$buildDir/generated-resources/main")
    generatedTestResourcesDir = file("$buildDir/generated-resources/test")
    jarTasks = tasks.withType(Jar)
}

if(!hasProperty("testJavaHome")) {
    ext.testJavaHome = System.getProperty("testJavaHome")
}
if (testJavaHome) {
    def testJavaHomeFile = new File(testJavaHome)
    javaInstallationForTest.javaHome = testJavaHomeFile
    javaInstallationProbe.checkJdk(testJavaHomeFile).configure(javaInstallationForTest)
} else {
    javaInstallationForTest.javaHome = jvm.javaHome
    javaInstallationProbe.current(javaInstallationForTest)
}

dependencies {
    testCompile libraries.junit, libraries.jmock, libraries.spock, libraries.groovy
}

// Extracted as it's also used by buildSrc
apply from: "$rootDir/gradle/compile.gradle"

task classpathManifest(type: ClasspathManifest)

sourceSets {
    main.output.dir generatedResourcesDir, builtBy: classpathManifest
}

testTasks.all { task ->
    maxParallelForks = rootProject.maxParallelForks
    if (isCiServer) {
        def ciProperties = [
            'org.gradle.test.maxParallelForks': maxParallelForks,
            'org.gradle.ci.agentCount': 2,
            'org.gradle.ci.agentNum': rootProject.agentNum,
        ]
        systemProperties(ciProperties)

        // Ignore Forking/agentNum properties in order to be able to pull tests
        if (task instanceof DistributionTest) {
            ciProperties.each { key, value -> task.ignoreSystemProperty(key) }
        } else {
            inputs.property('systemProperties') {
                systemProperties - ciProperties
            }
        }
    }
    executable = Jvm.forHome(javaInstallationForTest.javaHome).javaExecutable
    environment['JAVA_HOME'] = javaInstallationForTest.javaHome.absolutePath
    if (javaInstallationForTest.javaVersion.java7) {
        // enable class unloading
        task.jvmArgs '-XX:+UseConcMarkSweepGC', '-XX:+CMSClassUnloadingEnabled'
    }
    task.inputs.property('javaInstallation') {
        // Includes JVM vendor and major version
        javaInstallationForTest.displayName
    }
    doFirst {
        if (isCiServer) {
            println "maxParallelForks for '$task.path' is $task.maxParallelForks"
        }
    }
}

jarTasks.all { jar ->
    jar.version = baseVersion
    jar.manifest.mainAttributes(
        (Attributes.Name.IMPLEMENTATION_TITLE.toString()): 'Gradle',
        (Attributes.Name.IMPLEMENTATION_VERSION.toString()): baseVersion
    )
}

apply plugin: 'test-fixtures'

if (file("src/integTest").exists()) {
    apply from: "$rootDir/gradle/integTest.gradle.kts"
}

if (file("src/crossVersionTest").exists()) {
    apply from: "$rootDir/gradle/crossVersionTest.gradle"
}

if (file("src/performanceTest").exists()) {
    apply from: "$rootDir/gradle/performanceTest.gradle"
}

if (file("src/jmh").exists()) {
    apply from: "$rootDir/gradle/jmh.gradle"
}

apply from: "$rootDir/gradle/distributionTesting.gradle"
apply from: "$rootDir/gradle/intTestImage.gradle"

task compileAll {
    dependsOn tasks.matching { it instanceof JavaCompile || it instanceof GroovyCompile }
}
