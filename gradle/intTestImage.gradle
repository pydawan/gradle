/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.testing.DistributionTest

task intTestImage(type: Sync) {
    group = "Verification"
    into file("$buildDir/integ test")
}

tasks.withType(DistributionTest) {
    dependsOn intTestImage
}

configurations {
    partialDistribution
}

if (useAllDistribution) {
    task unpackAllDistribution(type: Sync) {
        dependsOn ':distributions:allZip'
        from { zipTree(tasks.getByPath(':distributions:allZip').archivePath) }
        into "$buildDir/tmp/unpacked-all-distribution"
    }

    // Compensate for the top level dir in the zip
    def unpackedPath = "$unpackAllDistribution.destinationDir/gradle-${version}"

    intTestImage {
        dependsOn unpackAllDistribution
        from(unpackedPath)
    }
} else {
    configurations { selfRuntime }

    afterEvaluate {
        if (project.tasks.findByName("jar")) {
            dependencies { selfRuntime project }
        }

        intTestImage {
            into('bin') {
                from { project(':launcher').startScripts.outputs.files }
                fileMode = 0755
            }

            def runtimeClasspathConfigurations = (rootProject.configurations.coreRuntime
                    + rootProject.configurations.coreRuntimeExtensions
                    + project.configurations.selfRuntime
                    + project.configurations.partialDistribution)
            def libsThisProjectDoesNotUse = (rootProject.configurations.runtime + rootProject.configurations.gradlePlugins) - runtimeClasspathConfigurations

            into 'lib', {
                from rootProject.configurations.runtime - libsThisProjectDoesNotUse
                into('plugins') {
                    from rootProject.configurations.gradlePlugins - rootProject.configurations.runtime - libsThisProjectDoesNotUse
                }
            }
            into 'samples', {
                from { project(":docs").outputs.samples }
            }
            doLast {
                ant.chmod(dir: "$destinationDir/bin", perm: "ugo+rx", includes: "**/*")
            }
        }
    }
}
